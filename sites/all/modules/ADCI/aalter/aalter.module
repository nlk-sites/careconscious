<?php
// $Id$

/**
 * Implementation of hook_menu()
 */
/*
function aalter_menu() {
  return array(
    'user/%user/todos' => array(
      'title' => 'Your Caregiving Tasks',
      'page callback' => 'aalter_user_todos',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'user/%user/todos/%' => array(
      'title' => 'Your Caregiving Tasks',
      'page callback' => 'aalter_user_todos',
      'page arguments' => array(1,3),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'user/%user/resources' => array(
      'title' => 'New Resources, just for you!',
      'page callback' => 'aalter_user_resources',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
  );
}
*/
/**
* Implementation of hook_block().
* Adds a block that has new text.
*/
function aalter_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('To Dos Block');
      return $blocks;
    case 'view':
      //$block[0]['subject'] = t('To Dos');
      $node = node_load(arg(1));
      if(!empty($node) && !empty($node->field_principle_nid)){
          $principle_id = $node->field_principle_nid[0]['nid'];
      }else $principle_id = NULL;
      //$block[0]['content'] = t('Hi from your custom block and your first new module');
      $block[0]['content'] = aalter_user_todos($principle_id);
       return $block[$delta];
  }
}

/**
 * Implementation of hook_theme()
 */

function aalter_theme() {
  return array(
    'aalter_principles_page' => array(
      'arguments' => array('principles' => NULL, 'user' => NULL),
      'template' => 'pages/aalter_principles_page',
    ),
    'aalter_todos_page' => array(
      'arguments' => array('principle' => NULL, 'todos' => NULL),
      'template' => 'pages/aalter_todos_page',
    ),
    'aalter_resources_page' => array(
      'arguments' => array('resources' => NULL),
      'template' => 'pages/aalter_resources_page',
    ),
  );
}

function aalter_user_todos($principle_id = NULL) {
    global $user;
  $grouped_todos = array();
  $principles_by_nid = array();

	$aUserTags = get_user_tags($user);
	$todo_items = array();
  
	$todolists_ids = array();
  $left = '';
  if ($principle_id) {
    $where = '&& ct.field_parent_principle_nid = %d';
  }
	$result = @db_query('
		SELECT
      nr.nid, nr.title, nr.body, nr.format, ct.field_tags_value as tags, 
      nr1.nid as p_nid, nr1.title as p_title, nr1.body as p_body, nr1.format as p_format
		FROM {node} n
    LEFT JOIN {node_revisions} nr ON nr.nid = n.nid 
    LEFT JOIN {content_type_todo} ct ON ct.nid = n.nid 
    LEFT JOIN {node_revisions} nr1 ON nr1.nid = ct.field_parent_principle_nid 
		WHERE n.type = \'todo\'
    ' . $where . '
    GROUP BY n.nid
		ORDER BY n.changed DESC 
  ', $principle_id);
  print_r('
		SELECT
      nr.nid, nr.title, nr.body, nr.format, ct.field_tags_value as tags,
      nr1.nid as p_nid, nr1.title as p_title, nr1.body as p_body, nr1.format as p_format
		FROM {node} n
    LEFT JOIN {node_revisions} nr ON nr.nid = n.nid
    LEFT JOIN {content_type_todo} ct ON ct.nid = n.nid
    LEFT JOIN {node_revisions} nr1 ON nr1.nid = ct.field_parent_principle_nid
		WHERE n.type = \'todo\'
    ' . $where . '
    GROUP BY n.nid
		ORDER BY n.changed DESC
  ');
  print_r($principle_id);
	while ($node = @db_fetch_object($result)) {
        print_r($node);
		$atags = explode(" ", $node->tags);
    if (is_array($atags) && count($atags)) {
      foreach ($atags as $key => $val) {
        $val = str_replace(',', '', $val);
        if (isset($aUserTags[$val])) {
          $group = $node->p_nid;
          
          if (!$principle_id) {
            $grouped_todos[$group][] = $principles_by_nid[$group] = $node;
          }else{
            $grouped_todos[] = $principle = $node;
          }
          break;
        }
      }
		}
	}

  ksort($principles_by_nid);
  ksort($grouped_todos);
  
  
  return $principle_id ? 
    theme('aalter_todos_page', $principle, $grouped_todos) :
    theme('aalter_principles_page', $principles_by_nid, $user);
}

function aalter_user_resources($user) {
	global $user;
	$aUserTags = get_user_tags($user);
	if (is_array($aUserTags) && count($aUserTags)) {
		$terms = array();
		foreach ($aUserTags as $tag) {
			$term = taxonomy_get_term_by_name(trim($tag, "'"));
			if ($term[0]->tid) {
				$terms[] = $term[0]->tid;
			}
		}
	}
	
	$nodes = array();

	if (is_array($terms) && count($terms)) {
		$result = taxonomy_select_nodes($terms);
		while ($node = db_fetch_object($result)) {
      $temp = node_load($node->nid);
      if ($temp->type == 'todo') {
        continue;
      }
			$nodes[] = $temp;
		}
	}

	return theme('aalter_resources_page', $nodes);
}

function aalter_form_alter( &$form, $form_state, $form_id){
  switch ($form_id) {
    case 'user_register':
      $form['submit']['#value'] = '';
    break;
    case 'user_login':
      $form['submit']['#value'] = '';
    break;
    case 'views_exposed_form':
      if (!$form['title']['#default_value']) {
        $form['title']['#attributes']['class'] = !$form['title']['#attributes']['class'] ? 'empty' : $form['title']['#attributes']['class'] . ' empty';
      }
      $form['title']['#attributes']['data-phrase'] = 'type in a keyword or phrase';
      $form['title']['#size'] = 60;
      $form['#validate'][] = 'aalter_views_exposed_form_validate';
    break;
    case 'expert_q_node_form':
      if (!isset($GLOBALS['user']->roles[3]) && !isset($GLOBALS['user']->roles[5])) {
        unset($form['taxonomy']);
      }
      if (!isset($GLOBALS['user']->roles[3])) {
        unset($form['body_field']['teaser_js']);
        unset($form['body_field']['teaser_include']);
      }
    break;
    case 'search_block_form':
      $form['submit']['#attributes'] = array('class' => 'medGoldBtn');
    break;
  }
}

function aalter_views_exposed_form_validate($form, &$form_state){
  if ($form_state['values']['title'] == $form['title']['#attributes']['data-phrase']) {
    $form_state['values']['title'] = $form_state['clicked_button']['#post']['title'] = '';
  }
}

function aalter_preprocess_page(&$variables) {
  
}

function aalter_views_query_alter(&$view,&$query) {
  if ($view->name == 'resources' && $view->current_display == 'page_1' && !isset($_GET['tid']) && !isset($_GET['title'])) {
    $view->pager['items_per_page'] = 5;
  }
}

function get_user_tags($account) {
  $tags = array();
  $ws_sids_query = "SELECT
      MAX(ws.sid) as sid

    FROM node n
    INNER JOIN webform_submissions ws ON n.nid = ws.nid
    INNER JOIN webform_submitted_data wsd ON ws.sid = wsd.sid

    WHERE
      n.type = 'webform' &&
      n.title LIKE 'Principle %' &&
      ws.uid = %d &&
      ws.is_draft != 1 &&
      wsd.data IS NOT NULL
GROUP BY ws.nid
    ORDER BY ws.submitted DESC;";
  $ws_sids_results = db_query($ws_sids_query, $account->uid);
  $ws_sids = array();
  while($r = @db_fetch_array($ws_sids_results)){
      $ws_sids[] = $r['sid'];
  }
  if(!empty($ws_sids)){
      $where = ' && ws.sid IN ('.implode(', ', $ws_sids).') ';
  }else $where = '';

  $query = '
    SELECT 
      n.nid, n.title, 
      wsd.cid, wsd.data,
      wc.name

    FROM node n
    INNER JOIN webform_submissions ws ON n.nid = ws.nid
    INNER JOIN webform_submitted_data wsd ON ws.sid = wsd.sid
    INNER JOIN webform_component wc ON wsd.nid = wc.nid && wsd.cid = wc.cid

    WHERE 
      n.type = \'webform\' && 
      n.title LIKE \'Principle %\' && 
      ws.uid = %d && 
      ws.is_draft != 1 &&
      wsd.data IS NOT NULL
      '.$where.'

    ORDER BY ws.submitted DESC
  ';
  
  $result = db_query($query, $account->uid);
  $principle = $nid = '';
  while($r = db_fetch_object($result)) {
    if ($nid != $r->nid) {
      $principle = explode(" ", $r->title);
    }
    $nid = $r->nid;
    $name = intval($r->name);
    
    get_user_tags_formats($tags, $principle[1], $name, $r->data);
  }
  return $tags;
}

function get_user_tags_formats(&$tags,  $principle, $number, $answer) {
  //format: p3q7yes (for test)
  $tag = "p" . $principle . "q" . $number . (($answer != "0") ? 'no' : 'yes');
  $tags[$tag] = "'" . $tag . "'";

  //format: P6Q10yes
  $tag = "P" . $principle . "Q" . $number . (($answer != "0") ? 'no' : 'yes');
  $tags[$tag] = "'" . $tag . "'";

  //format: P610yes
  $tag = "P" . $principle . $number . (($answer != "0") ? 'no' : 'yes');
  $tags[$tag] = "'" . $tag . "'";

  //format: P6-Q10-yes
  $tag = "P" . $principle . "-Q" . $number . "-" . (($answer != "0") ? 'no' : 'yes');
  $tags[$tag] = "'" . $tag . "'";

  //format: P6_10_yes
  $tag = "P" . $principle . "_" . $number . "_" . (($answer != "0") ? 'no' : 'yes');
  $tags[$tag] = "'" . $tag . "'";

  //format: P6_Q10_yes
  $tag = "P" . $principle . "_Q" . $number . "_" . (($answer != "0") ? 'no' : 'yes');
  $tags[$tag] = "'" . $tag . "'";

  //format: P6_10_0
  $tag = "P" . $principle . "_" . $number . "_" . $answer;
  $tags[$tag] = "'" . $tag . "'";

  //format: P6-Q10-0
  $tag = "P" . $principle . "-Q" . $number . "-" . $answer;
  $tags[$tag] = "'" . $tag . "'";

  //format: P6_Q10_0
  $tag = "P" . $principle . "_Q" . $number . "_" . $answer;
  $tags[$tag] = "'" . $tag . "'";
}